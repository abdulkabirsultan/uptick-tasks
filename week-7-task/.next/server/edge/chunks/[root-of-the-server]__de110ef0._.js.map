{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\nimport { getToken } from 'next-auth/jwt';\n\nexport async function middleware(request: NextRequest) {\n  const path = request.nextUrl.pathname;\n\n  // Define public paths that don't require authentication\n  const publicPaths = ['/', '/login', '/register'];\n  const isPublicPath = publicPaths.includes(path);\n\n  // Get the session token\n  const session = await getToken({\n    req: request,\n    secret: process.env.NEXTAUTH_SECRET,\n  });\n\n  // If the path is public and user is logged in, redirect to dashboard\n  if (isPublicPath && session) {\n    return NextResponse.redirect(new URL('/dashboard', request.url));\n  }\n\n  // If the path requires authentication and user is not logged in, redirect to login\n  if (!isPublicPath && !session) {\n    return NextResponse.redirect(new URL('/login', request.url));\n  }\n\n  return NextResponse.next();\n}\n\n// Match all routes except for static files, api routes, and _next\nexport const config = {\n  matcher: ['/((?!api|_next/static|_next/image|favicon.ico|.*\\\\.svg).*)'],\n};\n"],"names":[],"mappings":";;;;AAAA;AAAA;AAEA;;;AAEO,eAAe,WAAW,OAAoB;IACnD,MAAM,OAAO,QAAQ,OAAO,CAAC,QAAQ;IAErC,wDAAwD;IACxD,MAAM,cAAc;QAAC;QAAK;QAAU;KAAY;IAChD,MAAM,eAAe,YAAY,QAAQ,CAAC;IAE1C,wBAAwB;IACxB,MAAM,UAAU,MAAM,CAAA,GAAA,oJAAA,CAAA,WAAQ,AAAD,EAAE;QAC7B,KAAK;QACL,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACrC;IAEA,qEAAqE;IACrE,IAAI,gBAAgB,SAAS;QAC3B,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,cAAc,QAAQ,GAAG;IAChE;IAEA,mFAAmF;IACnF,IAAI,CAAC,gBAAgB,CAAC,SAAS;QAC7B,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,QAAQ,GAAG;IAC5D;IAEA,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAGO,MAAM,SAAS;IACpB,SAAS;QAAC;KAA6D;AACzE"}}]
}